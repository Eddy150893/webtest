{"version":3,"sources":["components/AddSearch.js","components/SearchGridItem.js","helpers/getResults.js","components/SearchGrid.js","hooks/useFetchResults.js","SearchApp.js","reportWebVitals.js","index.js"],"names":["AddSearch","setSearch","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","placeholder","SearchGridItem","id","name","image","dir","other","href","src","alt","getResults","search","a","url","fetch","resp","json","data","soapdemo","tvmaze","itunes","tvmazeFormatter","map","tvshow","show","original","network","country","language","itunesFormatter","multimedia","trackId","trackName","artworkUrl100","replace","shortDescription","soapFormmater","person","ID","Name","DOB","SSN","results","soap","SearchGrid","loading","state","setstate","useEffect","then","useFetchResults","className","SearchApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbd241c7.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\n\r\n\r\nexport const AddSearch = ({setSearch}) => {\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    const handleInputChange=(e)=>{\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length>2){\r\n        setSearch(inputValue);\r\n        setInputValue('');\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n        <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n        placeholder=\"Ingrese el texto que desea buscar\"\r\n        />\r\n    </form>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const SearchGridItem = ({\r\n    id,\r\n    name,\r\n    image=\"/generico.jpg\",\r\n    dir,\r\n    other}) => {\r\n    \r\n    return (\r\n        <a href=\"\">\r\n        <img src={image} alt={name}/>\r\n        </a>\r\n    )\r\n}","export const getResults=async(search)=>{\r\n    const url=`https://apitestsearch.herokuapp.com/busqueda?criterio=${search}`\r\n    const resp=await fetch(url);\r\n    const {data}=await resp.json();\r\n    const {soapdemo,tvmaze,itunes}=data;\r\n    const tvmazeFormatter=tvmaze?.map(tvshow=>{\r\n        return{\r\n            id:tvshow.show.id,\r\n            name:tvshow.show.name,\r\n            image:tvshow.show.image?.original,\r\n            dir:tvshow.show.network?.country.name,\r\n            other:tvshow.show.language,\r\n        }\r\n    })\r\n    const itunesFormatter=itunes?.map(multimedia=>{\r\n        return{\r\n            id:multimedia.trackId,\r\n            name:multimedia.trackName,\r\n            image:multimedia.artworkUrl100.replace(\"100x100bb\", \"300x1000bb\"),\r\n            dir:multimedia.country,\r\n            other:multimedia.shortDescription\r\n        }\r\n    })\r\n    const soapFormmater=soapdemo?.map(person=>{\r\n        return {\r\n            id:person.ID,\r\n            name:person.Name,\r\n            dir:person.DOB,\r\n            other:person.SSN\r\n        }\r\n    })\r\n    const results={\r\n        tvmaze:tvmazeFormatter?tvmazeFormatter:[],\r\n        itunes:itunesFormatter?itunesFormatter:[],\r\n        soap:soapFormmater?soapFormmater:[]\r\n    }\r\n    \r\n    return results;\r\n}","import React from 'react'\r\nimport { SearchGridItem } from './SearchGridItem';\r\nimport {useFetchResults} from '../hooks/useFetchResults';\r\nexport const SearchGrid = ({search}) => {\r\n    const {data,loading}=useFetchResults(search);\r\n    const {soap,tvmaze,itunes}=data;\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeIn\">{search}</h3>\r\n        {loading&&<p className=\"animate__animated animate__flash\">Loading...</p>}\r\n        <h1>TV Maze</h1>\r\n        <div className=\"box\">\r\n                {!loading&&tvmaze.map(tvshow=>(\r\n                    <SearchGridItem \r\n                    key={tvshow.id} \r\n                    {...tvshow}/>\r\n                ))}\r\n        </div>\r\n        <h1>SOAP DEMO</h1>\r\n        <div className=\"box\">\r\n                {!loading&&soap.map(person=>(\r\n                    <SearchGridItem \r\n                    key={person.id} \r\n                    {...person}/>\r\n                ))}\r\n        </div>\r\n        <h1>itunes</h1>\r\n        <div className=\"box\">\r\n                {!loading&&itunes.map(multimedia=>(\r\n                    <SearchGridItem \r\n                    key={multimedia.id} \r\n                    {...multimedia}/>\r\n                ))}\r\n        </div>\r\n    </>\r\n    )\r\n}","import {useState,useEffect} from 'react';\r\nimport { getResults } from '../helpers/getResults';\r\nexport const useFetchResults=(search)=>{\r\n    const [state, setstate] = useState({\r\n        data:{},\r\n        loading:true\r\n    })\r\n    useEffect(()=>{\r\n        if(search!==\"\"){\r\n            getResults(search)\r\n            .then(results=>setstate({\r\n                data:results,\r\n                loading:false\r\n            }));\r\n        }else{\r\n            setstate({\r\n                data:{},\r\n                loading:true\r\n            })\r\n        }\r\n    },[search])\r\n    return state;\r\n}","import React,{useState} from 'react'\nimport { AddSearch } from './components/AddSearch';\nimport {SearchGrid} from \"./components/SearchGrid\"; \nexport const SearchApp = () => {\n    \n    const [search,setSearch]=useState(\"\");\n    return (\n        <div>\n            <h2>Search App</h2>\n            <hr/>\n            <AddSearch setSearch={setSearch}/>\n            <ol>\n            <SearchGrid key={search} search={search}/>\n            </ol>\n        </div>\n    )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {SearchApp} from './SearchApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SearchApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}